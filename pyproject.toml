[project]
name = "streamll"
version = "0.1.0"
description = "Production Streaming Infrastructure for DSPy"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    # Core only - zero dependencies for schemas
    # Everything else is optional
]
authors = [
    {name = "Nick", email = "nick@glssn.co.uk"}
]
classifiers = [
    "Development Status :: 1 - Planning",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["dspy", "streaming", "llm", "observability", "ai"]

[project.urls]
Homepage = "https://github.com/glssn/streamll"
Repository = "https://github.com/glssn/streamll"
Issues = "https://github.com/glssn/streamll/issues"

[project.optional-dependencies]
# Core schemas only (default install has zero deps)
core = []

# Producer dependencies (for creating events)
producer-base = [
    "dspy>=2.6.24,<4.0.0",
    "pydantic>=2.0",
    "nanoid>=2.0",
    "typing-extensions>=4.0",
]

# Producer sink dependencies
redis-producer = [
    "streamll[producer-base]",
    "redis>=4.5.4,<7.0.0",
    "hiredis>=2.0.0,<3.0.0",
]
rabbitmq-producer = [
    "streamll[producer-base]",
    "aio-pika>=5.0.0,<10.0.0",
]
terminal-producer = [
    "streamll[producer-base]",
    "rich>=14.1.0",
]

# Consumer dependencies (lightweight, no DSPy)
redis-consumer = [
    "redis>=4.5.4,<7.0.0",
]
rabbitmq-consumer = [
    "aio-pika>=5.0.0,<10.0.0",
]

# Convenience bundles
producer = [
    "streamll[redis-producer,rabbitmq-producer,terminal-producer]",
]
consumer = [
    "streamll[redis-consumer,rabbitmq-consumer]",
]
all = [
    "streamll[producer,consumer]",
]

# Development dependencies
dev = [
    "streamll[all]",
    "pytest>=7.4",
    "pytest-asyncio>=0.21",
    "pytest-cov>=4.1",
    "pytest-timeout>=2.1",
    "pytest-mock>=3.11",
    "hypothesis>=6.88",
    "fakeredis>=2.20",
    "ruff>=0.1",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = """
    -ra
    --strict-markers
    --cov=src/streamll
    --cov-report=term-missing
    --cov-report=html
"""
# TODO: Enable when implementation starts
# --cov-fail-under=80
markers = [
    "unit: marks tests as unit tests (fast, no external dependencies)",
    "integration: marks tests as integration tests (require real infrastructure)", 
    "performance: marks tests as performance benchmarks",
    "redis: marks tests that require Redis",
    "rabbitmq: marks tests that require RabbitMQ",
    "slow: marks tests that take longer than 10 seconds",
    "future: marks tests for future functionality (may be skipped)",
    "aspirational: marks tests for aspirational/prototype functionality",
]


[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C90",  # mccabe
    "UP",  # pyupgrade
    "S",  # bandit security checks
    "T20", # print statements
    "SIM", # simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]  # Allow assert in tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
